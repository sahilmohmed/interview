{"version":3,"file":"utils.js","names":["_allureJsCommons","require","_sdk","_mocha","_state","_steps","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","IS_WIN","Cypress","platform","getFileNameFromPath","path","substring","lastIndexOf","exports","resolveSpecRelativePath","spec","projectDir","getProjectDir","specPath","absolute","relative","replaceAll","uint8ArrayToBase64","data","u8arrayLike","Array","isArray","buffer","btoa","fromCharCode","getTestStartData","test","_test$wallClockStarte","getNamesAndLabels","start","wallClockStartedAt","getTime","Date","now","getTestStopData","_test$duration","_retries","duration","retries","getTestSkipData","statusDetails","message","getStepStopData","step","status","id","stop","resolveStepStatus","testReportedKey","markTestAsReported","isTestReported","iterateSuites","parent","suiteStack","s","pop","suites","iterateTests","suite","tests","getSuitePath","reverse","getSuiteTitlePath","title","map","generateApiStepId","getAllureState","nextApiStepId","toString","rawName","cleanTitle","name","labels","extractMetadataFromString","titlePath","slice","fullNameSuffix","concat","join","isAllureHook","hook","includes","ALLURE_REPORT_SYSTEM_HOOK","isRootAfterAllHook","root","hookName","isLastRootAfterHook","context","currentAfterAll","rootSuite","hooks","lastAfterAll","findLast","h","hookId","getStatusDataOfTestSkippedByHookError","hookTitle","isEachHook","err","Status","SKIPPED","getStatusFromError","trace","getMessageAndTraceFromError","getSkipReason","suiteName"],"sources":["../../../src/browser/utils.ts"],"sourcesContent":["import { Status } from \"allure-js-commons\";\nimport type { StatusDetails } from \"allure-js-commons\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { CypressHook, CypressStepStopMessage, CypressSuite, CypressTest, StepDescriptor } from \"../types.js\";\nimport { ALLURE_REPORT_SYSTEM_HOOK } from \"./events/mocha.js\";\nimport { getAllureState, getProjectDir } from \"./state.js\";\nimport { resolveStepStatus } from \"./steps.js\";\n\nconst IS_WIN = Cypress.platform === \"win32\";\n\nexport const getFileNameFromPath = (path: string) => path.substring(path.lastIndexOf(IS_WIN ? \"\\\\\" : \"/\") + 1);\n\nexport const resolveSpecRelativePath = (spec: Cypress.Spec) => {\n  const projectDir = getProjectDir();\n  const specPath = projectDir ? spec.absolute.substring(projectDir.length + 1) : spec.relative;\n  return IS_WIN ? specPath.replaceAll(\"\\\\\", \"/\") : specPath;\n};\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getTestStartData = (test: CypressTest) => ({\n  ...getNamesAndLabels(Cypress.spec, test),\n  start: test.wallClockStartedAt?.getTime() || Date.now(),\n});\n\nexport const getTestStopData = (test: CypressTest) => ({\n  duration: test.duration ?? 0,\n  retries: (test as any)._retries ?? 0,\n});\n\nexport const getTestSkipData = () => ({\n  statusDetails: { message: \"This is a pending test\" },\n});\n\nexport const getStepStopData = (step: StepDescriptor, status?: Status, statusDetails?: StatusDetails) => {\n  const data: CypressStepStopMessage[\"data\"] = {\n    id: step.id,\n    stop: Date.now(),\n    status: status ?? resolveStepStatus(step),\n  };\n  if (statusDetails) {\n    data.statusDetails = statusDetails;\n  }\n  return data;\n};\n\nconst testReportedKey = Symbol(\"The test has been reported to Allure\");\n\nexport const markTestAsReported = (test: CypressTest) => {\n  (test as any)[testReportedKey] = true;\n};\n\nexport const isTestReported = (test: CypressTest) => (test as any)[testReportedKey] === true;\n\nexport const iterateSuites = function* (parent: CypressSuite) {\n  const suiteStack: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = parent; s; s = suiteStack.pop()) {\n    yield s;\n\n    // Pushing in reverse allows us to maintain depth-first pre-order traversal;\n    // the same order is used by Mocha & Cypress.\n    for (let i = s.suites.length - 1; i >= 0; i--) {\n      suiteStack.push(s.suites[i]);\n    }\n  }\n};\n\nexport const iterateTests = function* (parent: CypressSuite) {\n  for (const suite of iterateSuites(parent)) {\n    yield* suite.tests;\n  }\n};\n\nexport const getSuitePath = (test: CypressTest) => {\n  const suites: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = test.parent; s; s = s.parent) {\n    suites.push(s);\n  }\n  suites.reverse();\n  return suites;\n};\n\nexport const getSuiteTitlePath = (test: CypressTest): string[] =>\n  getSuitePath(test)\n    .filter((s) => s.title)\n    .map((s) => s.title);\n\nexport const generateApiStepId = () => (getAllureState().nextApiStepId++).toString();\n\nexport const getNamesAndLabels = (spec: Cypress.Spec, test: CypressTest) => {\n  const rawName = test.title;\n  const { cleanTitle: name, labels } = extractMetadataFromString(rawName);\n  const suites = test.titlePath().slice(0, -1);\n  const fullNameSuffix = `${[...suites, name].join(\" \")}`;\n  return { name, labels, fullNameSuffix };\n};\n\nexport const isAllureHook = (hook: CypressHook) => hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK);\n\nexport const isRootAfterAllHook = (hook: CypressHook) => hook.parent!.root && hook.hookName === \"after all\";\n\nexport const isLastRootAfterHook = (context: Mocha.Context) => {\n  const currentAfterAll = context.test as CypressHook;\n  const rootSuite = (context.test as CypressHook).parent!;\n  const hooks = (rootSuite as any).hooks as CypressHook[];\n  const lastAfterAll = hooks.findLast((h) => h.hookName === \"after all\");\n  return lastAfterAll?.hookId === currentAfterAll.hookId;\n};\n\nexport const getStatusDataOfTestSkippedByHookError = (\n  hookTitle: string,\n  isEachHook: boolean,\n  err: Error,\n  suite: CypressSuite,\n) => {\n  const status = isEachHook ? Status.SKIPPED : getStatusFromError(err);\n  const { message, trace } = getMessageAndTraceFromError(err);\n  return {\n    status,\n    statusDetails: {\n      message: isEachHook ? getSkipReason(hookTitle, suite) : message,\n      trace,\n    },\n  };\n};\n\nconst getSkipReason = (hookTitle: string, suite: CypressSuite) => {\n  const suiteName = suite.title ? `'${suite.title}'` : \"root\";\n  return `'${hookTitle}' defined in the ${suiteName} suite has failed`;\n};\n"],"mappings":"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","ignoreList":[]}